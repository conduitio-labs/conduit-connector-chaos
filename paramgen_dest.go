// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package chaos

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	DestinationConfigConfigureMode = "configureMode"
	DestinationConfigOpenMode      = "openMode"
	DestinationConfigTeardownMode  = "teardownMode"
	DestinationConfigWriteMode     = "writeMode"
)

func (DestinationConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		DestinationConfigConfigureMode: {
			Default:     "success",
			Description: "ConfigureMode controls what the Configure method should do.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"success", "error", "block", "context-done", "panic"}},
			},
		},
		DestinationConfigOpenMode: {
			Default:     "success",
			Description: "OpenMode controls what the Open method should do.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"success", "error", "block", "context-done", "panic"}},
			},
		},
		DestinationConfigTeardownMode: {
			Default:     "success",
			Description: "TeardownMode controls what the Teardown method should do.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"success", "error", "block", "context-done", "panic"}},
			},
		},
		DestinationConfigWriteMode: {
			Default:     "success",
			Description: "WriteMode controls what the Write method should do.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"success", "error", "block", "context-done", "panic"}},
			},
		},
	}
}
